#!/usr/bin/env ruby

SNIPPETS_PATH = '~/repos/snippets'.freeze

class Program
  def initialize(action:, name:, options:, stdin:)
    @name    = name
    @options = options
    @file    = stdin

    action = action.chomp
    self.send(action) # TODO: if respond_to
  end

  def add
    if @file.nil?
      error 'No stream given'
      return
    end
   
    puts "write: #{@name} with: #{@file}"
    Dir.chdir(File.expand_path(SNIPPETS_PATH)) do
      File.open(@name, 'w') { |f| f << @file }
    end
  end

  def show
    # TODO: options for n
    # https://stackoverflow.com/questions/1490138/reading-the-first-line-of-a-file-in-ruby 
    path = File.join(File.expand_path(SNIPPETS_PATH), @name) # TODO: use ##markers to find a section in a file and return it!
    line = File.open(path, &:gets)
    puts line
  end
  alias :s :show

  def error(message)
    puts "Error: #{message}"
  end
end


# args
# usage:
# snip action name
begin
  action, name, *options= ARGV

  if action.nil? || name.nil?
    puts "Usage: snip action name"
  else
    options = {
      action: action,
      name: name,
      options: options,
      stdin: nil
    }

    unless STDIN.tty?
      options[:stdin] = STDIN.read
    end

    Program.new(options)
    exit(0)
  end
rescue
  exit(47)
end
